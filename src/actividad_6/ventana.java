/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package actividad_6;

import java.io.File;
import java.io.IOException;
import java.io.RandomAccessFile;

/**
 *
 * @author Juan Pablo
 */
public class ventana extends javax.swing.JFrame {

    /**
     * Creates new form ventana
     */
    public ventana() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        NOMBRE = new javax.swing.JLabel();
        NUMERO = new javax.swing.JLabel();
        NOMBRE1 = new javax.swing.JLabel();
        NUMEROTXT = new javax.swing.JTextField();
        NOMBRETXT = new javax.swing.JTextField();
        DELETEBTN = new javax.swing.JButton();
        CREATEBTN = new javax.swing.JButton();
        READBTN = new javax.swing.JButton();
        UPDATEBTN = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        NOMBRE.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        NOMBRE.setForeground(new java.awt.Color(0, 0, 0));
        NOMBRE.setText("MODIFICACION ARCHIVOS");
        jPanel1.add(NOMBRE, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 40, -1, -1));

        NUMERO.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        NUMERO.setForeground(new java.awt.Color(0, 0, 0));
        NUMERO.setText("NUMERO:");
        jPanel1.add(NUMERO, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 220, 180, 70));

        NOMBRE1.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        NOMBRE1.setForeground(new java.awt.Color(0, 0, 0));
        NOMBRE1.setText("NOMBRE:");
        jPanel1.add(NOMBRE1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 150, 170, 60));

        NUMEROTXT.setBackground(new java.awt.Color(255, 255, 255));
        NUMEROTXT.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        NUMEROTXT.setForeground(new java.awt.Color(0, 0, 0));
        NUMEROTXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NUMEROTXTActionPerformed(evt);
            }
        });
        jPanel1.add(NUMEROTXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 230, 330, 50));

        NOMBRETXT.setBackground(new java.awt.Color(255, 255, 255));
        NOMBRETXT.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        NOMBRETXT.setForeground(new java.awt.Color(0, 0, 0));
        NOMBRETXT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NOMBRETXTActionPerformed(evt);
            }
        });
        jPanel1.add(NOMBRETXT, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 152, 330, 50));

        DELETEBTN.setBackground(new java.awt.Color(0, 51, 255));
        DELETEBTN.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        DELETEBTN.setForeground(new java.awt.Color(255, 255, 255));
        DELETEBTN.setText("DELETE");
        DELETEBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DELETEBTNActionPerformed(evt);
            }
        });
        jPanel1.add(DELETEBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 360, -1, -1));

        CREATEBTN.setBackground(new java.awt.Color(0, 51, 255));
        CREATEBTN.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        CREATEBTN.setForeground(new java.awt.Color(255, 255, 255));
        CREATEBTN.setText("CREATE");
        CREATEBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CREATEBTNActionPerformed(evt);
            }
        });
        jPanel1.add(CREATEBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 360, -1, -1));

        READBTN.setBackground(new java.awt.Color(0, 51, 255));
        READBTN.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        READBTN.setForeground(new java.awt.Color(255, 255, 255));
        READBTN.setText("READ");
        READBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                READBTNActionPerformed(evt);
            }
        });
        jPanel1.add(READBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 360, -1, -1));

        UPDATEBTN.setBackground(new java.awt.Color(0, 51, 255));
        UPDATEBTN.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N
        UPDATEBTN.setForeground(new java.awt.Color(255, 255, 255));
        UPDATEBTN.setText("UPDATE");
        UPDATEBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UPDATEBTNActionPerformed(evt);
            }
        });
        jPanel1.add(UPDATEBTN, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 360, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 720, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 479, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void NUMEROTXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NUMEROTXTActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_NUMEROTXTActionPerformed

    private void NOMBRETXTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NOMBRETXTActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_NOMBRETXTActionPerformed

    private void CREATEBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CREATEBTNActionPerformed
        // TODO add your handling code here:
        try {

            // Get the name of the contact to be updated
            // from the Command line argument
            String newName = String.valueOf(NOMBRETXT.getText());

            // Get the number to be updated
            // from the Command line argument
            long newNumber = Long.parseLong(NUMEROTXT.getText());

            String nameNumberString;
            String name;
            long number;
            int index;

            // Using file pointer creating the file.
            File file = new File("friendsContact.txt");

            if (!file.exists()) {

                // Create a new file if not exists.
                file.createNewFile();
            }

            // Opening file in reading and write mode.
            RandomAccessFile raf
                    = new RandomAccessFile(file, "rw");
            boolean found = false;

            // Checking whether the name
            // of contact already exists.
            // getFilePointer() give the current offset
            // value from start of the file.
            while (raf.getFilePointer() < raf.length()) {

                // reading line from the file.
                nameNumberString = raf.readLine();

                // splitting the string to get name and
                // number
                String[] lineSplit
                        = nameNumberString.split("!");

                // separating name and number.
                name = lineSplit[0];
                number = Long.parseLong(lineSplit[1]);

                // if condition to find existence of record.
                if (name == newName
                        || number == newNumber) {
                    found = true;
                    break;
                }
            }

            if (found == false) {

                // Enter the if block when a record
                // is not already present in the file.
                nameNumberString
                        = newName + "!"
                        + String.valueOf(newNumber);

                // writeBytes function to write a string
                // as a sequence of bytes.
                raf.writeBytes(nameNumberString);

                // To insert the next record in new line.
                raf.writeBytes(System.lineSeparator());

                // Print the message
                System.out.println(" Friend added. ");

                // Closing the resources.
                raf.close();
            } // The contact to be updated
            // could not be found
            else {

                // Closing the resources.
                raf.close();

                // Print the message
                System.out.println(" Input name"
                        + " does not exists. ");
            }
        } catch (IOException ioe) {

            System.out.println(ioe);
        } catch (NumberFormatException nef) {

            System.out.println(nef);
        }


    }//GEN-LAST:event_CREATEBTNActionPerformed

    private void READBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_READBTNActionPerformed

        try {

            String nameNumberString;
            String name;
            long number;
            int index;

            // Using file pointer creating the file.
            File file = new File("friendsContact.txt");

            if (!file.exists()) {

                // Create a new file if not exists.
                file.createNewFile();
            }

            // Opening file in reading and write mode.
            RandomAccessFile raf
                    = new RandomAccessFile(file, "rw");
            boolean found = false;

            // Traversing the file
            // getFilePointer() give the current offset
            // value from start of the file.
            while (raf.getFilePointer() < raf.length()) {

                // reading line from the file.
                nameNumberString = raf.readLine();

                // splitting the string to get name and
                // number
                String[] lineSplit
                        = nameNumberString.split("!");

                // separating name and number.
                name = lineSplit[0];
                number = Long.parseLong(lineSplit[1]);

                // Print the contact data
                System.out.println(
                        "Friend Name: " + name + "\n"
                        + "Contact Number: " + number + "\n");
            }
        } catch (IOException ioe) {

            System.out.println(ioe);
        } catch (NumberFormatException nef) {

            System.out.println(nef);
        }


    }//GEN-LAST:event_READBTNActionPerformed

    private void UPDATEBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UPDATEBTNActionPerformed
        // TODO add your handling code here:
        // Java program to update in the file "friendsContact.txt"
// and change the number of an old contact



		try {

			// Get the name of the contact to be updated
			// from the Command line argument
			String newName = NOMBRETXT.getText();

			// Get the number to be updated
			// from the Command line argument
			int newNumber = Integer.parseInt(NUMEROTXT.getText());

			String nameNumberString;
			String name;
			int number;
			int index;

			// Using file pointer creating the file.
			File file = new File("friendsContact.txt");

			if (!file.exists()) {

				// Create a new file if not exists.
				file.createNewFile();
			}

			// Opening file in reading and write mode.
			RandomAccessFile raf
				= new RandomAccessFile(file, "rw");
			boolean found = false;

			// Checking whether the name
			// of contact already exists.
			// getFilePointer() give the current offset
			// value from start of the file.
			while (raf.getFilePointer() < raf.length()) {

				// reading line from the file.
				nameNumberString = raf.readLine();

				// splitting the string to get name and
				// number
				String[] lineSplit
					= nameNumberString.split("!");

				// separating name and number.
				name = lineSplit[0];
				number = Integer.parseInt(lineSplit[1]);

				// if condition to find existence of record.
				if (name.equals(newName)
					|| number == newNumber) {
					found = true;
					break;
				}
			}

			// Update the contact if record exists.
			if (found == true) {

				// Creating a temporary file
				// with file pointer as tmpFile.
				File tmpFile = new File("temp.txt");

				// Opening this temporary file
				// in ReadWrite Mode
				RandomAccessFile tmpraf
					= new RandomAccessFile(tmpFile, "rw");

				// Set file pointer to start
				raf.seek(0);

				// Traversing the friendsContact.txt file
				while (raf.getFilePointer()
					< raf.length()) {

					// Reading the contact from the file
					nameNumberString = raf.readLine();

					index = nameNumberString.indexOf('!');
					name = nameNumberString.substring(
						0, index);

					// Check if the fetched contact
					// is the one to be updated
					if (name.equals(newName)) {

						// Update the number of this contact
						nameNumberString
							= name + "!"
							+ String.valueOf(newNumber);
					}

					// Add this contact in the temporary
					// file
					tmpraf.writeBytes(nameNumberString);

					// Add the line separator in the
					// temporary file
					tmpraf.writeBytes(
						System.lineSeparator());
				}

				// The contact has been updated now
				// So copy the updated content from
				// the temporary file to original file.

				// Set both files pointers to start
				raf.seek(0);
				tmpraf.seek(0);

				// Copy the contents from
				// the temporary file to original file.
				while (tmpraf.getFilePointer()
					< tmpraf.length()) {
					raf.writeBytes(tmpraf.readLine());
					raf.writeBytes(System.lineSeparator());
				}

				// Set the length of the original file
				// to that of temporary.
				raf.setLength(tmpraf.length());

				// Closing the resources.
				tmpraf.close();
				raf.close();

				// Deleting the temporary file
				tmpFile.delete();

				System.out.println(" Friend updated. ");
			}

			// The contact to be updated
			// could not be found
			else {

				// Closing the resources.
				raf.close();

				// Print the message
				System.out.println(" Input name"
								+ " does not exists. ");
			}
		}

		catch (IOException ioe) {
			System.out.println(ioe);
		}

		catch (NumberFormatException nef) {
			System.out.println(nef);
		}


    }//GEN-LAST:event_UPDATEBTNActionPerformed

    private void DELETEBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DELETEBTNActionPerformed
try {
            // Get the name of the contact to be deleted
            String newName = String.valueOf(NOMBRETXT.getText());

            String nameNumberString;
            String name;
            long number;
            int index;

            // Using file pointer creating the file.
            File file = new File("friendsContact.txt");

            if (!file.exists()) {
                // Create a new file if not exists.
                file.createNewFile();
            }

            // Opening file in reading and write mode.
            RandomAccessFile raf = new RandomAccessFile(file, "rw");
            boolean found = false;

            // Checking whether the name of contact exists.
            // getFilePointer() give the current offset
            // value from start of the file.
            while (raf.getFilePointer() < raf.length()) {
                // reading line from the file.
                nameNumberString = raf.readLine();

                // splitting the string to get name and number
                String[] lineSplit = nameNumberString.split("!");

                // separating name and number.
                name = lineSplit[0];
                number = Long.parseLong(lineSplit[1]);

                // if condition to find existence of record.
                if (name.equals(newName)) {
                    found = true;
                    break;
                }
            }

            // Delete the contact if record exists.
            if (found) {
                // Creating a temporary file with file pointer as tmpFile.
                File tmpFile = new File("temp.txt");

                // Opening this temporary file in ReadWrite Mode
                RandomAccessFile tmpraf = new RandomAccessFile(tmpFile, "rw");

                // Set file pointer to start
                raf.seek(0);

                // Traversing the friendsContact.txt file
                while (raf.getFilePointer() < raf.length()) {
                    // Reading the contact from the file
                    nameNumberString = raf.readLine();

                    index = nameNumberString.indexOf('!');
                    name = nameNumberString.substring(0, index);

                    // Check if the fetched contact is the one to be deleted
                    if (name.equals(newName)) {
                        // Skip inserting this contact into the temporary file
                        continue;
                    }

                    // Add this contact in the temporary file
                    tmpraf.writeBytes(nameNumberString);
                    // Add the line separator in the temporary file
                    tmpraf.writeBytes(System.lineSeparator());
                }

                // The contact has been deleted now
                // So copy the updated content from the temporary file to original file.

                // Set both files pointers to start
                raf.seek(0);
                tmpraf.seek(0);

                // Copy the contents from the temporary file to original file.
                while (tmpraf.getFilePointer() < tmpraf.length()) {
                    raf.writeBytes(tmpraf.readLine());
                    raf.writeBytes(System.lineSeparator());
                }

                // Set the length of the original file to that of temporary.
                raf.setLength(tmpraf.length());

                // Closing the resources.
                tmpraf.close();
                raf.close();

                // Deleting the temporary file
                tmpFile.delete();

                System.out.println("Friend deleted.");
            } else {
                // Closing the resources.
                raf.close();

                // Print the message
                System.out.println("Input name does not exist.");
            }
        } catch (IOException ioe) {
            System.out.println(ioe);
        }
    }//GEN-LAST:event_DELETEBTNActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ventana.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ventana().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton CREATEBTN;
    private javax.swing.JButton DELETEBTN;
    private javax.swing.JLabel NOMBRE;
    private javax.swing.JLabel NOMBRE1;
    private javax.swing.JTextField NOMBRETXT;
    private javax.swing.JLabel NUMERO;
    private javax.swing.JTextField NUMEROTXT;
    private javax.swing.JButton READBTN;
    private javax.swing.JButton UPDATEBTN;
    private javax.swing.JPanel jPanel1;
    // End of variables declaration//GEN-END:variables
}
